const PAPER_MELT_FRAGMENT_SHADER: &'static str = "#version 120
precision lowp float;

varying vec2 uv;

uniform vec2 TextureSize;
uniform float Time;
uniform float Seed;
uniform sampler2D Texture;

// Define a color palette
const vec3 Palette[4] = vec3[4](
    vec3(0.8, 0.2, 0.2), // Color 1 (e.g., red)
    vec3(0.2, 0.8, 0.2), // Color 2 (e.g., green)
    vec3(0.2, 0.2, 0.8), // Color 3 (e.g., blue)
    vec3(0.8, 0.8, 0.2)  // Color 4 (e.g., yellow)
);

float cosRange(float amt, float range, float minimum) {
    return (((1.0 + cos(amt * 3.14159 / 180.0)) * 0.5) * range) + minimum;
}

float hash(float x) {
    return fract(sin(x * 12.9898 * 78.233) * 43758.5453) * Seed;
}

vec3 getPaletteColor(float index) {
    int paletteIndex = int(mod(index, 4.0)); // Ensure index is within range
    return Palette[paletteIndex];
}

void main() {
    vec2 uv = gl_FragCoord.xy / TextureSize;
    vec2 p = (2.0 * gl_FragCoord.xy - TextureSize) / max(TextureSize.x, TextureSize.y);
    
    float ct = cosRange(Time * (5.0 + hash(1.0)), 3.0, 1.1);
    float xBoost = cosRange(Time * (0.2 + hash(2.0)), 5.0, 5.0);
    float yBoost = cosRange(Time * (0.1 + hash(3.0)), 10.0, 5.0);
    float fScale = cosRange(Time * (15.5 + hash(4.0)), 1.25, 0.5);

    for (int i = 1; i < 40; i++) {
        float _i = float(i);
        vec2 newp = p;
        newp.x += 0.2 / _i * sin(_i * p.y + Time * cos(ct) * 0.5 / 20.0 + 0.005 * _i) * fScale + xBoost; 
        newp.y += 0.2 / _i * sin(_i * p.x + Time * ct * 0.3 / 40.0 + 0.03 * float(i + 15)) * fScale + yBoost;
        p = newp;
    }

    // Map the effect color to the palette
    float effectIndex = mod(p.x * 10.0 + p.y * 5.0 + hash(5.0), 4.0);
    vec3 col = getPaletteColor(effectIndex);
    col *= 0.975;

    // Add border
    float extrusion = (col.x + col.y + col.z) / 4.0;
    extrusion *= 1.5;
    
    vec4 textureColor = texture2D(Texture, uv);

    gl_FragColor = vec4(col, extrusion) + textureColor * 0.5;
}
";